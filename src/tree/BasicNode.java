package tree;

/**
 * TODO: Insert description here. (generated by anupams)
 */
public class BasicNode<T extends Comparable<T>> implements Comparable<T>{

  private BasicNode<T> left;
  private BasicNode<T> right;
  private final T value;

  public BasicNode(T value) {
    this.value = value;
  }

  /**
   * @return the left
   */
  public BasicNode<T> getLeft() {
    return left;
  }

  /**
   * @param left the left to set
   */
  public void setLeft(BasicNode<T> left) {
    this.left = left;
  }

  /**
   * @return the right
   */
  public BasicNode<T> getRight() {
    return right;
  }

  /**
   * @param right the right to set
   */
  public void setRight(BasicNode<T> right) {
    this.right = right;
  }

  /**
   * @return the value
   */
  public T getValue() {
    return value;
  }

  public boolean hasLeft() {
    return null != left;
  }

  public boolean hasRight() {
    return null != right;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(value);
    return value.toString();
  }

  @Override
  public int compareTo(T o) {
    return this.value.compareTo(o);
  }
}
